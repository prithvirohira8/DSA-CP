Problem Link:https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/

// Approach: Same as that of constructing BT with preorder and inorder.
// Difference: post order has the order Left Child -> Right Child -> Root.
// Hence here root of the tree would be at the last index and the consequent roots of the 
// tree would have to be found in reverse order.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution24 {
    static TreeNode solve(int postorder_root_ind, int inorder_l, int inorder_h, int[] postorder, int[] inorder,
            HashMap<Integer, Integer> hm) {
        int root_val = postorder[postorder_root_ind];
        TreeNode node = new TreeNode(root_val);

        int inorder_root_ind = hm.get(root_val);
        int nodes_to_left = inorder_root_ind - inorder_l;
        int nodes_to_right = inorder_h - inorder_root_ind;

        if (nodes_to_left <= 0)
            node.left = null;
        else
            node.left = solve(postorder_root_ind - nodes_to_right - 1, inorder_l, inorder_root_ind - 1, postorder,
                    inorder, hm);

        if (nodes_to_right <= 0)
            node.right = null;
        else
            node.right = solve(postorder_root_ind - 1, inorder_root_ind + 1, inorder_h, postorder, inorder, hm);

        return node;
    }

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            hm.put(inorder[i], i);
        }
        return solve(postorder.length - 1, 0, inorder.length - 1, postorder, inorder, hm);
    }
}

// Time Complexity: O(N)
// Recursively explore each node

// Space Complexity: O(N)
// Generated by Recursive Stack