{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww20920\viewh10700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs44 \cf0 Design Patterns (Java)\

\fs36 \
3 Categories:\
\
1. Creational\
2. Behavioral\
3. Structural\
\
Creational Patterns:\
\
1. Prototype\
2. Builder\
3. Singleton\
4. Factory\
\
Prototype Design Pattern:\
- Used when a fully initialized instance to be copied or cloned\
- Example Chess game initial setup\
\
Builder Design Pattern:\
- Used in the creation of complex objects\
- Separates object construction from its representation\
- Comes into use when we want to hide a complex internal structure from somebody who\'92s trying to use the interface to create an object.\
Example:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 1.png \width11570 \height9360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
- In this example the multi course dinner interface is being provided which consists of other objects\
\
Singleton Design Pattern\
- Only one instance of a particular class can exist\
- System Class (java.lang.System) is a good example of singleton. There is only instance for the jvm running. \

\fs24 {{\NeXTGraphic Pasted Graphic 2.png \width15360 \height13840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
- Singleton should be avoided as they are difficult to Unit Test\
\
Factory Design Pattern\
- helps us to create an instance of a single family of objects. It can separate the instantiation and can also allow to alter the existence of any object without affecting the other objects. (What the last sentence means that in the example below, Male can be changed to any other class of Objects too.\
\

\fs24 {{\NeXTGraphic Pasted Graphic 3.png \width23220 \height11430 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
\
Structural Design patterns:\
1. Proxy\
2. Decorator\
3. Facade\
4. Adapter\
5. Flyweight\
\
Proxy Design Pattern\
- It is an object representing another object\
- Basically to hide the complexity of the object being represented.\
- Example: Credit Card is a proxy for what is in our bank account.\
- EJB - Remote and Home. There is a Home object which is being talked to, that represents the remote object to hide its complexity\
\
Decorator Design Pattern\

\fs24 {{\NeXTGraphic Pasted Graphic 4.png \width24010 \height11260 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
- The toppings or discount just should be passed as a parameter to the Pizza or order\
\
Facade Design pattern:\
- It consists a single class that represents an entire subsystem.\
- This further helps to reduce network calls, reduce coupling and helps in establishing transaction boundary (this means that if there is an error at any step, there should be a rollback to the earlier step which would be at a correct state)\
Example:\

\fs24 {{\NeXTGraphic Pasted Graphic 5.png \width12940 \height9270 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Adapter Design Pattern:\
- Acts as a power adapter to match different interfaces.\

\fs24 {{\NeXTGraphic Pasted Graphic 6.png \width11410 \height9800 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Flyweight Design Pattern:\
- reuse objects instead of creating new instances again, setting/changing the values of the instances instead of creating new instances.\

\fs24 {{\NeXTGraphic Pasted Graphic 7.png \width19360 \height6220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Behavioral Design Patterns:\
1. Chain of responsibility pattern\
2. Iterator\
3. State	\
4. Strategy\
5. Observer\
6. Visitor\
7. Template Method\
8. Command\
9. Memento\
10. Mediator\
\
Chain of Responsibility Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 8.png \width15780 \height8360 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
- helps reduce coupling severely\
\
Iterator Design Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 9.png \width8230 \height5550 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
State Design Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 10.png \width7010 \height4160 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Understand the Fan Wall Control Example very well in the video\
\
Strategy Pattern:\
\

\fs24 {{\NeXTGraphic Pasted Graphic 11.png \width8700 \height3530 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Look at the Strategy class example from the video\
\
Observer Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 12.png \width16060 \height10130 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Visitor pattern\
- Visitor does not use inheritance\

\fs24 {{\NeXTGraphic Pasted Graphic 13.png \width12170 \height12080 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Template Method Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 14.png \width11350 \height9220 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Command Method Pattern:\

\fs24 {{\NeXTGraphic Pasted Graphic 15.png \width7720 \height6120 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Memento Method Pattern\

\fs24 {{\NeXTGraphic Pasted Graphic 16.png \width17990 \height3830 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 \
\
Mediator Design pattern\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 {{\NeXTGraphic Pasted Graphic 17.png \width13570 \height6240 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs36 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
}